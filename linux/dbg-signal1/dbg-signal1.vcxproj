<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup Label="ProjectConfigurations">
    <!-- x86 -->
    <ProjectConfiguration Include="Debug-WSL-gcc|x86">
      <Configuration>Debug-WSL-gcc</Configuration>
      <Platform>x86</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug-remote-gcc|x86">
      <Configuration>Debug-remote-gcc</Configuration>
      <Platform>x86</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x86">
      <Configuration>Release</Configuration>
      <Platform>x86</Platform>
    </ProjectConfiguration>
    <!-- x64 -->
    <ProjectConfiguration Include="Debug-WSL-gcc|x64">
      <Configuration>Debug-WSL-gcc</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug-remote-gcc|x64">
      <Configuration>Debug-remote-gcc</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <!-- ARM -->
    <ProjectConfiguration Include="Debug-WSL-gcc|ARM">
      <Configuration>Debug-WSL-gcc</Configuration>
      <Platform>ARM</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug-remote-gcc|ARM">
      <Configuration>Debug-remote-gcc</Configuration>
      <Platform>ARM</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|ARM">
      <Configuration>Release</Configuration>
      <Platform>ARM</Platform>
    </ProjectConfiguration>
    <!-- ARM64 -->
    <ProjectConfiguration Include="Debug-WSL-gcc|ARM64">
      <Configuration>Debug-WSL-gcc</Configuration>
      <Platform>ARM64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug-remote-gcc|ARM64">
      <Configuration>Debug-remote-gcc</Configuration>
      <Platform>ARM64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|ARM64">
      <Configuration>Release</Configuration>
      <Platform>ARM64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  
  <!-- User project properties -->
  
  <PropertyGroup Condition="$(Configuration.EndsWith('-WSL-gcc'))" Label="Globals">
    <PlatformToolset>WSL_1_0</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="$(Configuration.EndsWith('-remote-gcc'))" Label="Globals">
    <PlatformToolset>Remote_GCC_1_0</PlatformToolset>
  </PropertyGroup>
  
  
  <PropertyGroup Label="Globals">
    <ProjectGuid>{20240102-0000-0000-0000-221226000001}</ProjectGuid>
    <ProjectName>dbg-signal1</ProjectName>
    <TargetName>dbg-signal1</TargetName>
    <Keyword>Linux</Keyword>
    <ApplicationType>Linux</ApplicationType>
    <ApplicationTypeRevision>1.0</ApplicationTypeRevision>
    <TargetLinuxPlatform>Generic</TargetLinuxPlatform>
    <LinuxProjectType>{D51BCBC9-82E9-4017-911E-C93873C4EA2B}</LinuxProjectType>
  </PropertyGroup>

  <!-- Microsoft.Cpp.Default.props 
  	For Linux .vcxproj, this should be after above "global" Properties. -->
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  
  <PropertyGroup Label="Configuration">

    <!-- If we need to create a static lib xxx.a , not xxx.out executable, enable this:  
         (This must be set *after* Microsoft.Cpp.Default.props) -->
    <!-- <ConfigurationType>StaticLibrary</ConfigurationType>  --> 
    
    <!-- If you want to customize 'cast-folder' for this project,  change RemoteRootDir and RemoteProjectRelDir,
         Source code files in your .vcxproj will be cast-copy to Linux machine's 
         $(RemoteRootDir)/$(RemoteProjectRelDir) folder. 
         By default(when not explicitly set), the cast-copy destination will be ~/projects/$(ProjectName) . 
    -->
    <RemoteRootDir>~/projects/$(SolutionName)</RemoteRootDir>
    <RemoteProjectRelDir>$(ProjectName)</RemoteProjectRelDir>
    
  </PropertyGroup>
  
  <!-- Debug or Release -->
  <PropertyGroup Condition="$(Configuration.StartsWith('Debug'))" Label="Configuration">
    <UseDebugLibraries>true</UseDebugLibraries>
  </PropertyGroup>
  <PropertyGroup Condition="$(Configuration.StartsWith('Release'))" Label="Configuration">
    <UseDebugLibraries>false</UseDebugLibraries>
  </PropertyGroup>
  
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  
  <ImportGroup Label="ExtensionSettings">
  </ImportGroup>
  <ImportGroup Label="Shared">
  </ImportGroup>
  <ImportGroup Label="PropertySheets">
  </ImportGroup>
  <PropertyGroup Label="UserMacros" />
  
  <!-- Always use target-platform-prefixed gcc/g++ command lines, so that WSL can cope with multiple target platforms. -->
  
  <PropertyGroup Condition="'$(Platform)'=='x86'">
    <!-- On Win10 WSL, we should have x86 and/or x64 compiler installed. 
        Using Ubuntu Linux 22.04 for example:
    	
    	sudo apt install g++-i686-linux-gnu  # install x86 32bit compiler
    	sudo apt install g++                 # install x64 64bit compiler
     -->
    <RemoteCCompileToolExe>i686-linux-gnu-gcc</RemoteCCompileToolExe>
    <RemoteCppCompileToolExe>i686-linux-gnu-g++</RemoteCppCompileToolExe>
    <RemoteLdToolExe>i686-linux-gnu-g++</RemoteLdToolExe>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Platform)'=='x64'">
    <RemoteCCompileToolExe>x86_64-linux-gnu-gcc</RemoteCCompileToolExe>
    <RemoteCppCompileToolExe>x86_64-linux-gnu-g++</RemoteCppCompileToolExe>
    <RemoteLdToolExe>x86_64-linux-gnu-g++</RemoteLdToolExe>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Platform)'=='ARM'">
    <RemoteCCompileToolExe>arm-linux-gnueabi-gcc</RemoteCCompileToolExe>
    <RemoteCppCompileToolExe>arm-linux-gnueabi-g++</RemoteCppCompileToolExe>
    <RemoteLdToolExe>arm-linux-gnueabi-g++</RemoteLdToolExe>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Platform)'=='ARM64'">
    <RemoteCCompileToolExe>aarch64-linux-gnu-gcc</RemoteCCompileToolExe>
    <RemoteCppCompileToolExe>aarch64-linux-gnu-g++</RemoteCppCompileToolExe>
    <RemoteLdToolExe>aarch64-linux-gnu-g++</RemoteLdToolExe>
  </PropertyGroup>
  <!-- Pending Q: when to use arm-linux-gnueabihf-g++ ? -->
  
  <!-- Adaptive .obj/.exe/.pdb output folder structure -->
  
  <PropertyGroup>
    <objdirsuffix Condition="$(SolutionName)!=$(ProjectName)">.$(ProjectName)</objdirsuffix>
     <IntDir>$(ProjectDir)obj.linux$(objdirsuffix)\$(Platform)\$(Configuration)\</IntDir>
    <OutDir>$(SolutionDir)bin.linux\$(Platform)\$(Configuration)\</OutDir>
    <RemoteIntRelDir>$(RemoteProjectRelDir)/obj.linux/$(Platform)/$(Configuration)</RemoteIntRelDir>
    <RemoteOutRelDir>$(RemoteProjectRelDir)/bin.linux/$(Platform)/$(Configuration)</RemoteOutRelDir>

    <!-- [20230326.R1] This is to workround a possible VS2019 16.11 VSLinux bug: 
      When launching WSL_1_0 exe, VSIDE will go hard to launch exe inside:
        /mnt/d/gitw/Templates/vs2019/dbg-signal1/bin/x64/Debug-WSL-gcc
      instead of the correct:
        /mnt/d/gitw/Templates/vs2019/dbg-signal1/bin.linux/x64/Debug-WSL-gcc
      .
      Without this workaround, user needs to set the `<DebuggerWorkingDirectory>$(OutDir)</DebuggerWorkingDirectory>` 
      into dbg-signal1.vcxproj.user to make it work.
    -->
    <DebuggerWorkingDirectory>$(OutDir)</DebuggerWorkingDirectory>

    <!-- [20230326.R2] Chj: Workaround for a special project trait on VC2019 VSLinux. 
      If .sln is in parent path of .vcxproj, Remote_GCC_1_0 tries to launch wrong exe path on Linux. So we need this.
    -->
    <RemoteDebuggerCommand Condition="$(Configuration.EndsWith('-remote-gcc'))">$(RemoteDeployDir)/bin.linux/$(Platform)/$(Configuration)/$(TargetName)$(TargetExt)</RemoteDebuggerCommand>
  </PropertyGroup>

  <!-- 
  	You may need to add this to your .vcxproj.user, 
  	to make final executable file have x(execution) bit on Linux.
  	
  	No, not necessary, VSIDE will do this for us via SSH tunnel. Do this only if you need to 
  	copy extra executables.

     <PropertyGroup>
  		<PreLaunchCommand>chmod +x $(RemoteOutDir)/$(TargetFilename)</PreLaunchCommand>
     </PropertyGroup>
  	
  -->


  <!-- 
  	Compiler/Linker Behavior Settings : shared 
  -->
  <ItemDefinitionGroup>
    <ClCompile>
      <CppLanguageStandard>c++14</CppLanguageStandard>
      <PreprocessorDefinitions>;;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>./extra-includes;$(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ClCompile>
    <Link>

      <AdditionalLibraryDirectories>;;./myextralib;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
      
      <!-- To link a library(resolv, pthread), pick either form below: -->
      <AdditionalDependencies>;;-lresolv;%(AdditionalDependencies)</AdditionalDependencies>
      <LibraryDependencies>;;pthread;%(LibraryDependencies)</LibraryDependencies>
      
    </Link>
    <!-- Better build.log file naming -->
    <BuildLog>
      <Path>$(IntDir)__$(MSBuildProjectName).build.log</Path>
    </BuildLog>
  </ItemDefinitionGroup>
  
  <!-- 
  	Compiler Behavior Settings : Debug 
  -->
  <ItemDefinitionGroup Condition="$(Configuration.StartsWith('Debug'))">
    <ClCompile>
      <Optimization>Disabled</Optimization>
      <PreprocessorDefinitions>_DEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
    <Link>
    </Link>
  </ItemDefinitionGroup>
  
  <!-- 
  	Compiler Behavior Settings : Release 
  -->
  <ItemDefinitionGroup Condition="$(Configuration.StartsWith('Release'))">
    <ClCompile>
      <PreprocessorDefinitions>_RELEASE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
    <Link>
    </Link>
  </ItemDefinitionGroup>
  
  <!-- 
    Source file list:
   -->
  <ItemGroup>
    <ClCompile Include="dbg-signal1.cpp" />
  </ItemGroup>
  <ItemGroup>
    <!-- 
    <ClInclude Include="ps_headers.h" />
     -->
  </ItemGroup>

  <!-- MSBuild system stock Cpp.targets -->
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <ImportGroup Label="ExtensionTargets">
  </ImportGroup>

  <!-- import VSPG start -->
								  <!-- 
  <PropertyGroup>
    <VSPG_BootsDir_NoTBS>..\_VSPG\boots</VSPG_BootsDir_NoTBS>
  </PropertyGroup>
  <ImportGroup Label="PropertySheets">
    <Import Project="$(VSPG_BootsDir_NoTBS)\_VSPG.props" Condition="exists('$(VSPG_BootsDir_NoTBS)\_VSPG.props')"/>
  </ImportGroup>
  									-->
  <!-- import VSPG end -->

  <!-- below code is just for test -->
  <Target Name="test1_PreBuild" BeforeTargets="PreBuildEvent">
    <Message Text='Pre: ResolvedRemoteTarget=$(ResolvedRemoteTarget)'/>
  </Target>
  <Target Name="test2_PostBuild" AfterTargets="PostBuildEvent">
    <Message Text='Post: ResolvedRemoteTarget=$(ResolvedRemoteTarget)'/>
  </Target>
  
  
</Project>